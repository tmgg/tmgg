import {DeleteOutlined, EditOutlined, PlusOutlined, SyncOutlined} from '@ant-design/icons';
import {Button, Card, Col, Empty, Form, Input, InputNumber, message, Popconfirm, Row, Space, Switch, Tree,Splitter} from 'antd';
import React from 'react';
import {ButtonList,dictValueTag, ViewBoolean,FieldDateRange,FieldDictSelect,FieldRadioBoolean, FieldDatePickerString, FieldDateTimePickerString,FieldRemoteTreeSelect,Page, HttpUtil, ProTable} from "@tmgg/tmgg-base";


export default class extends React.Component {


  state = {

    formLoading: false,
    formValues: undefined,
    submitLoading: false,
    formEditing: false,


    treeData: [],
    treeLoading: false,
    defaultExpandedKeys: [],
  }

  treeRef = React.createRef();

  componentDidMount() {
    this.loadTree(true)
  }

  loadTree = (showLoading) => {
    if(showLoading){
      this.setState({treeLoading: true})
    }

    http.get('${firstLowerName}/tree').then(treeData => {
      const defaultExpandedKeys = this.getAutoExpand(treeData)
      this.setState({treeData, defaultExpandedKeys})
    }).finally(() => {
      this.setState({treeLoading: false});
    })
  }

  // 如果只有一个根节点，则自动展开第一个
  getAutoExpand(treeData) {
    if (treeData && treeData.length === 1) {
      return [treeData[0].key]
    }
  }

  handleDelete = row => {
    http.post('${firstLowerName}/delete', row).then(rs => {
      this.setState({formValues: null})
      this.loadTree()
    })
  }


  onSelect = (selectedKeys) => {
    const key = selectedKeys[0]

    this.setState({formLoading: true, formEditing: false})
    http.get("${firstLowerName}/detail", {id: key}).then(rs => {
      this.setState({formValues: rs})
    }).finally(() => {
      this.setState({formLoading: false})
    })
  }

  onFinish = (values) => {
    this.setState({submitLoading: true, formEditing: false})
    http.post('${firstLowerName}/save', values).then(rs => {
      this.loadTree()
    }).finally(() => {
      this.setState({submitLoading: false})
    })
  }


  render() {
    let disabled = this.state.formValues == null;
    return <Page>
      <Splitter >
           <Splitter.Panel defaultSize={400}   >
          <Card title='${label}' loading={this.state.treeLoading}
                extra={<>
                  <Button icon={<SyncOutlined/>} type='link' onClick={this.loadTree}>刷新</Button>
                </>}>

            <Tree.DirectoryTree
              ref={this.treeRef}
              treeData={this.state.treeData}
              defaultExpandedKeys={this.state.defaultExpandedKeys}
              expandAction='doubleClick'

              onSelect={this.onSelect}
            >

            </Tree.DirectoryTree>


          </Card>
       </Splitter.Panel>
                      <Splitter.Panel style={{paddingLeft:16}}>
          <Card
            title='${label} 查看/编辑'
            loading={this.state.formLoading}
            extra={<Space>
              <Button onClick={() => {
                this.setState({
                  formLoading:true,
                  formEditing: true,
                  formValues:{
                    pid: this.state.formValues?.id,
                  }
                }, ()=>{
                  this.setState({formLoading:false})
                })
              }}>
                <PlusOutlined/> 新增
              </Button>
              <Button disabled={disabled} onClick={() => {
                this.setState({
                  formEditing: true
                })
              }}>
                <EditOutlined/> 编辑
              </Button>

              <Popconfirm title={'是否确定删除${label}'} disabled={disabled}
                          onConfirm={() => this.handleDelete(this.state.formValues)}>
                <Button icon={<DeleteOutlined/>}  disabled={disabled}>删除</Button>
              </Popconfirm>


            </Space>}
          >

            {this.state.formValues ?
              <Form
                disabled={!this.state.formEditing}
                labelCol={{flex: '150px'}}
                wrapperCol={{flex: '400px'}}
                initialValues={this.state.formValues}
                onFinish={this.onFinish}
              >
                <Form.Item noStyle name='id'>
                </Form.Item>
                <Form.Item label='父节点' name='pid'>
                  <FieldRemoteTreeSelect url='${firstLowerName}/tree'/>
                </Form.Item>
                <#list fieldInfoList as f>
                    <#if (!f.hideInForm && f.name != 'pid')>
                              <Form.Item label='${f.title}' name='${f.name}' rules={[{required: true}]}>
                               <#if (f.dict)>
                                 <FieldDictSelect typeCode="${f.dictTypeCode}" />
                                <#elseif (f.type == 'java.lang.Boolean')>
                                   <Switch />
                                <#elseif (f.type == 'java.lang.Float' || f.type == 'java.lang.Integer')>
                                    <InputNumber />
                                <#else>
                                    <Input/>
                                </#if>
                              </Form.Item>
                    </#if>
                </#list>


                <Form.Item label=' ' colon={false}>
                  <Button type="primary" htmlType='submit' loading={this.state.submitLoading}>保存</Button>
                </Form.Item>

              </Form>
              :
              <Empty description='请选择'/>
            }


          </Card>

   </Splitter.Panel>
              </Splitter>



    </Page>
  }


}



