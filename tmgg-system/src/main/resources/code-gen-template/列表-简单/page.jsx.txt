import {PlusOutlined} from '@ant-design/icons'
import {Button, Card,InputNumber, Popconfirm,Modal,Form,Input,message} from 'antd'
import React from 'react'
import {ButtonList,dictValueTag, ViewBoolean,FieldDateRange,FieldDictSelect,FieldRadioBoolean, FieldDatePickerString, FieldDateTimePickerString,Page, HttpUtil, ProTable} from "@tmgg/tmgg-base";



export default class extends React.Component {

  state = {
    formValues: {},
    formOpen: false
  }

  formRef = React.createRef()
  tableRef = React.createRef()

  columns = [
    <#list listFields as f>

    {
      title: '${f.title}',
      dataIndex: '${f.name}',

    <#if (f.dict)>
      render (v){
        return dictValueTag('${f.dictTypeCode}', v)
      },
    </#if>

    <#if (f.type == 'java.lang.Boolean')>
         render(v){
            return <ViewBoolean value={v}>
          },

    </#if>


    },
    </#list>

    {
      title: '操作',
      dataIndex: 'option',
      render: (_, record) => (
          <ButtonList>
            <Button size='small' perm='${firstLowerName}:save' onClick={() => this.handleEdit(record)}>编辑</Button>
            <Popconfirm perm='${firstLowerName}:delete' title='是否确定删除${label}'  onConfirm={() => this.handleDelete(record)}>
              <Button size='small'>删除</Button>
            </Popconfirm>
          </ButtonList>
      ),
    },
  ]

  handleAdd = ()=>{
    this.setState({formOpen: true, formValues: {}})
  }

  handleEdit = record=>{
      this.setState({formOpen: true, formValues: record})
  }


  onFinish = values => {
    HttpUtil.post( '${firstLowerName}/save', values).then(rs => {
      this.setState({formOpen: false})
      this.tableRef.current.reload()
    })
  }



  handleDelete = record => {
    HttpUtil.postForm( '${firstLowerName}/delete', {id:record.id}).then(rs => {
      this.tableRef.current.reload()
    })
  }

  render() {
    return <Page>
      <ProTable
          actionRef={this.tableRef}
          toolBarRender={() => {
            return <ButtonList>
              <Button perm='${firstLowerName}:save' type='primary' onClick={this.handleAdd}>
                <PlusOutlined/> 新增
              </Button>
            </ButtonList>
          }}
          request={(params) => HttpUtil.pageData('${firstLowerName}/page', params)}
          columns={this.columns}
      />

  <Modal title='${label}'
    open={this.state.formOpen}
    onOk={() => this.formRef.current.submit()}
    onCancel={() => this.setState({formOpen: false})}
    destroyOnClose
    maskClosable={false}
    >

    <Form ref={this.formRef} labelCol={{flex: '100px'}}
        initialValues={this.state.formValues}
        onFinish={this.onFinish}
        >
        <Form.Item  name='id' noStyle></Form.Item>

        <#list fieldInfoList as f>
         <#if (!f.hideInForm)>
              <Form.Item label='${f.title}' name='${f.name}' rules={[{required: true}]}>
               <#if (f.dict)>
                 <FieldDictSelect typeCode="${f.dictTypeCode}" />
                <#elseif (f.type == 'java.lang.Boolean')>
                   <FieldRadioBoolean />
                <#elseif (f.type == 'java.lang.Float' || f.type == 'java.lang.Integer' || f.type == 'java.lang.Long')>
                    <InputNumber />
                <#elseif (f.type == 'java.util.Date')>
                     <FieldDateTimePickerString />
                <#else>
                    <Input/>
                </#if>
              </Form.Item>
         </#if>
         </#list>

    </Form>
  </Modal>
    </Page>


  }
}


